df.rimpo
# plots
ggplot2::ggplot(df.rimpo, aes(x=variable, y=rimpo))+ geom_bar(position = "dodge")
# plots
ggplot2::ggplot(df.rimpo, aes(x=variable, y=rimpo))+ geom_bar()
# plots
ggplot2::ggplot(df.rimpo, aes(x=variable, y=rimpo))+ geom_bar(stat = "identity")
#******************************
# Logistic regression: glm
#******************************
# conditions, high O3 levels (how many days with O3>50 or 60 ppb)
ths            <- 50 # change to 60 and see how the number of excendances changes
data_jja$date.f  <- 1:length(data_jja$date)
data_jja$o3_50   <- ifelse(mydata$o3>=ths, "orange", "forestgreen")
data_jja$date.f  <- 1:length(data_jja$date)
data_jja$o3_50   <- ifelse(data_jja$o3>=ths, "orange", "forestgreen")
plot(o3~date.f, data=data_jja, type="h", col=o3_50)
abline(h=ths, lty=2, col="red")
data_jja$o3_50 <- ifelse(data_jja$o3>ths,1,0)
ggplot2::ggplot(data_jja, aes(x=seq(1:length(date)), y=o3)) + geom_point() +
geom_abline(h=ths)
ggplot2::ggplot(data_jja, aes(x=seq(1:length(date)), y=o3)) + geom_point() +
geom_hline(yintercept = ths, color="red")
form
#One way to write the form of the equation:
form  <- (paste("o3~",paste(pred.names,collapse='+'),sep=""))
pred.names <- names(data_jja[-(which(names(data_jja)%in%c("o3","date","mon")))])
# These are the covariates
print(pred.names)
#One way to write the form of the equation:
form  <- (paste("o3~",paste(pred.names,collapse='+'),sep=""))
form <- as.formula(form)
#Add the form to the equation
fit <- lm(form, data=data_jja,na.action=na.omit)
# fit <- lm(o3 ~ LO3+Tx+Gh+RH+SR+ST+TC+U10, data=dat,na.action=na.omit)
summary(fit)
# Other useful functions
coef <- coefficients(fit) # model coefficients
fitted(fit) # predicted values
confint(fit, level=0.95) # CIs for model parameters
residuals(fit) # residuals
anova(fit) # anova table
fitglm <- glm(form,data=dat,family=binomial())
fitglm <- glm(form,data=data_jja,family=binomial())
#Convert the outcome(o3) into binary data:
data_jja$o3 <- ifelse(data_jja$o3>ths,1,0)
fitglm <- glm(form,data=data_jja,family=binomial())
head(data_jja)
form
#Load library
library(MASS)  # general packages
library(stats)
# library(Hmisc)
library(ggplot2) # plots
library(dplyr)
#Read the file (adding the right path)
mydata  <- read.csv("data/data_year_o3.csv")
#Look the data
str(mydata)
head(mydata)
# Convert date to Date for plotting
mydata$date <- as.Date(mydata$date)
# Create months
mydata$mon <- format(mydata$date, "%m")
#########################
#Data visualization
#Simple plots
########################
plot(mydata$o3,type="l",col="orange",xlab="days",ylab="MDA8 O3 (ppb)",main="MDA8 O3")
hist(mydata$o3,main="Distribution of Ozone",col='skyblue',xlab="MDA8 O3")
# Other options of plots
# ggplot2
ggplot2::ggplot(mydata, aes(x=date, y=o3, group=1)) +
geom_line(color="red") +
scale_x_date(date_breaks = "1 years", date_labels = "%Y-%m")
plot(mydata$tmax,mydata$o3,pch = 19, col = "blue", main = "Ozone vs Tx", xlab = "Tx (k)", ylab = "O3 (ppb)")
#Add fit lines
abline(lm(o3~tmax,mydata),col="red") # regression line (y~x)
# visualize all historigrams-graphs at once (alternative)
# hist(dat) #library(Hmisc)
#
pairs(mydata[,c(3:9,2)],panel=panel.smooth,col='black',cex=0.5,cex.labels=1)
#another way to make the plots
#lower panel:# panel.smooth function is built in.
source("plot_panel.R") #add correct path
pairs(mydata[,c(3:9,2)], cex.labels =0.9,
lower.panel=panel.smooth, upper.panel=panel.cor,diag.panel=panel.hist)
# We can create a season column
mydata <- mydata%>%mutate(season=ifelse(mon>="01" & mon<="02" | mon=="12", "DJF",
ifelse(mon>="03" & mon<="05", "MAM",
ifelse(mon>="06" & mon<="08", "JJA",
ifelse(mon>="09" & mon<="11", "SON",NA)))))
# We plot each season
# create a subset for each season and visualise
data_jja <- subset(mydata, season=="JJA")
plot(data_jja$o3,type="l",col="orange",xlab="days",ylab="MDA8 O3 (ppb)",main="MDA8 O3")
#*******************
#Linear regression:
#*******************
# Before starting, we will split the data into seasons and we restrict the analysis to
# summer (JJA). Repeat the steps for MAM for comparison
# Let's use  data_jja
#Fitting different models
#null model
# Remove the last column to avoid problems
data_jja$season <- NULL
pred.names <- names(data_jja[-(which(names(data_jja)%in%c("o3","date","mon")))])
# These are the covariates
print(pred.names)
#One way to write the form of the equation:
form  <- (paste("o3~",paste(pred.names,collapse='+'),sep=""))
form <- as.formula(form)
#Add the form to the equation
fit <- lm(form, data=data_jja,na.action=na.omit)
#******************************
# Logistic regression: glm
#******************************
# conditions, high O3 levels (how many days with O3>50 or 60 ppb)
ths            <- 50 # change to 60 and see how the number of excendances changes
data_jja$date.f  <- 1:length(data_jja$date)
data_jja$o3_50   <- ifelse(data_jja$o3>=ths, "orange", "forestgreen")
plot(o3~date.f, data=data_jja, type="h", col=o3_50)
abline(h=ths, lty=2, col="red")
#Convert the outcome(o3) into binary data:
data_jja$o3 <- ifelse(data_jja$o3>ths,1,0)
names(data_jja)
fitglm <- glm(o3~tmax+rh+ssrd+blh+Direction+ws,data=data_jja,family=binomial())
#summary of model
summary(fitglm)
#Apply model selection
modelglm <- stepAIC(fitglm,direction="both")
summary(modelglm)
plot(modelglm)
newdata <- data_jja
newdata$pred.o50 <- fitglm$fitted.values
head8newdata
head(newdata)
predict(fitglm)
head(predict(fitglm,type="response"))
head(fitglm$fitted.values)
head(predict(fitglm))
head(exp(fitglm$fitted.values)-1)
summary(fitglm)
# Compute pseudo R-square
modelChi  <- modelglm$null.deviance - modelglm$deviance
pseudo.R2 <- modelChi / modelglm$null.deviance
pseudo.R2
# Compute the pseudo p-value
Chidf <- modelglm$df.null - modelglm$df.residual
modelChi <- modelglm$null.deviance - modelglm$deviance
1 - pchisq(modelChi, Chidf)
modelglm$df.null
modelglm$df.residual
Chidf
modelglm$null.deviance - modelglm$deviance
pchisq(modelChi, Chidf)
x <- (predict(fitglm,type="response"))
head(x)
xp <- 1 / (1 + exp(-x))
head(xp)
plogis(predict(fitglm))
head(plogis(predict(fitglm)) )
head(xp)
head(x)
x <- (predict(fitglm,type="response"))
pred  <- predict(modelglm,type="response")
head(pred)
probs <- exp(pred)/(1+exp(pred))
head(probs)
pred  <- predict(modelglm)
head(pred)
probs <- exp(pred)/(1+exp(pred))
head(pred)
head(probs)
fitglm <- glm(o3_50~tmax+rh+ssrd+blh+Direction+ws,data=data_jja,family=binomial())
head(data_jja)
fitglm <- glm(o3~tmax+rh+ssrd+blh+Direction+ws,data=data_jja,family=binomial())
library(knitr)
library(rmarkdown)
class(data_jja$o3)
fitglm <- glm(o3~tmax+rh+ssrd+blh+Direction+ws,data=data_jja,family="binomial")
knitr::opts_chunk$set(echo = FALSE)
load("data/data_year_o3.Rda")
summary(data_o3)
head(data_o3)
library(ggplot2)
library(cowplot)
p1 <- ggplot2::ggplot(data_o3, aes(x=date, y=o3, group=1)) +
geom_line(color="red") +
scale_x_date(date_breaks = "2 years", date_labels = "%Y-%m")
p2 <- ggplot2::ggplot(data_o3, aes(x=o3))+ geom_histogram(binwidth = 10, color="grey", alpha=0.8) + ggtitle("Histogram")
p3 <- ggplot2::ggplot(data_o3, aes(x=tmax, y=o3))+ geom_point(color="blue", alpha=0.5) + stat_smooth(method = "lm", color="red") + xlab("Tx")
p4 <- ggplot2::ggplot(data_o3, aes(x=rh, y=o3))+ geom_point(color="blue", alpha=0.5) + stat_smooth(method = "lm", color="red") + xlab("RH")
plot_grid(p1,p2,p3,p4, ncol=2)
library(dplyr)
data_o3%>%
mutate(season=ifelse( format(date, "%m")>="01" & format(date, "%m") <="02" |format(date, "%m")=="12", "DJF",
ifelse( format(date, "%m")>="03" &  format(date, "%m")<="05", "MAM",
ifelse( format(date, "%m")>="06" &  format(date, "%m")<="08", "JJA",
ifelse(format(date, "%m")>="09" &  format(date, "%m")<="11","SON",NA)))))%>%
ggplot2::ggplot(aes(x=date, y=o3, color=season)) +
geom_point() +
scale_x_date(date_breaks = "3 years", date_labels = "%Y-%m") + facet_wrap(~season, ncol=2)
library(ggplot2)
library(psych)
pairs.panels(data_o3[,-1],
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
)
m1  <- lm(o3~tmax,data=data_o3,na.action=na.omit)
summary(m1)
data_jja  <- subset(data_o3, format(date,"%m")>="06" & format(date, "%m")<="08")
m2  <- lm(o3~tmax+rh,data=data_jja,na.action=na.omit)
m3  <- lm(o3~tmax+rh+ssrd,data=data_jja,na.action=na.omit)
mfull  <- lm(o3~tmax+rh+ssrd+tcc+ws+Direction,data=data_jja,na.action=na.omit)
summary(mfull)
par(mfrow=c(2,2))
plot(mfull)
library(MASS)
m.null <- lm(o3~1, data=data_jja)
m.f  <- stepAIC(m.null, direction="forward", scope=list(lower=m.null, upper=mfull))
m.b  <- stepAIC(mfull, direction="backward")
library(relaimpo)
relImportance <- calc.relimp(m.f, type="lmg")
df.rimpo <- data.frame("rimpo"=sort(round(relImportance$lmg, 3), decreasing=TRUE))
df.rimpo$variable <- rownames(df.rimpo)
# plots
ggplot2::ggplot(df.rimpo, aes(x=variable, y=rimpo))+ geom_bar(stat = "identity")
#Convert the outcome(o3) into binary data:
ths <- 50
data_jja$o3_50 <- ifelse(data_jja$o3>ths,1,0)
data_jja$o3_50   <- ifelse(data_jja$o3>=ths, "orange", "forestgreen")
plot(o3~date, data=data_jja, type="h", col=o3_50)
abline(h=ths, lty=2, col="red")
fitglm <- glm(o3~tmax+rh+ssrd+blh+Direction+ws,data=data_jja,family="binomial")
data_jja$o3 <- as.factor(data_jja$o3)
fitglm_tx <- glm(o3~tmax,data=data_jja,family="binomial")
summary(fitglm_tx)
coef(fitglm)
coef(fitglm_tx)
exp(coef(fitglm_tx))
exp(coef(fitglm_tx)["tmax"])
ggplot2::ggplot(data_o3, aes(x=date, y=o3, group=1)) +
geom_line(color="red") +
scale_x_date(date_breaks = "2 years", date_labels = "%Y-%m")
ggplot2::ggplot(aes(x=date, y=o3, color=season)) +
geom_boxplot() +
scale_x_date(date_breaks = "3 years", date_labels = "%Y-%m") + facet_wrap(~season, ncol=2)
ggplot2::ggplot(aes(x=format(date,"%Y"), y=o3, color=season)) +
geom_boxplot() +
scale_x_date(date_breaks = "3 years", date_labels = "%Y-%m") + facet_wrap(~season, ncol=2)
ggplot2::ggplot(aes(x=format(date,"%Y"), y=o3, color=season)) +
geom_boxplot()
data_o3 <- data_o3%>%
mutate(season=ifelse( format(date, "%m")>="01" & format(date, "%m") <="02" |format(date, "%m")=="12", "DJF",
ifelse( format(date, "%m")>="03" &  format(date, "%m")<="05", "MAM",
ifelse( format(date, "%m")>="06" &  format(date, "%m")<="08", "JJA",
ifelse(format(date, "%m")>="09" &  format(date, "%m")<="11","SON",NA)))))
ggplot2::ggplot(data_o3, aes(x=date, y=o3, color=season)) +
geom_point() +
scale_x_date(date_breaks = "3 years", date_labels = "%Y-%m") + facet_wrap(~season, ncol=2)
ggplot2::ggplot(data_o3, aes(x=date, y=o3, color=season)) +
geom_boxplot() +
scale_x_date(date_breaks = "3 years", date_labels = "%Y-%m") + facet_wrap(~season, ncol=2)
ggplot2::ggplot(data_o3, aes(x=format(date,"%Y"), y=o3, color=season)) +
geom_boxplot() +
scale_x_date(date_breaks = "3 years", date_labels = "%Y-%m") + facet_wrap(~season, ncol=2)
class(data_o3$date)
format(data_o3$date,"%Y")
ggplot2::ggplot(data_o3, aes(x=format(date,"%Y"), y=o3, color=season)) +
geom_boxplot() + facet_wrap(~season, ncol=2)
name(data_o3)
names(data_o3)
data_o3[,-c("date","season")]
data_o3[,-c(1,10)]
names(data_o3[,-c(1,10)])
ggplot2::ggplot(data_o3, aes(x=format(date,"%Y"), y=o3, fill=season)) +
scale_x_discrete(breaks=seq(2000,2010,3))+
geom_boxplot() + facet_wrap(~season, ncol=2)
setwd("~/Documents/Lab_ex/Lab_ex/Lab_extremes")
#Load library
library(MASS)  # general packages
library(stats)
# library(Hmisc)
library(ggplot2) # plots
library(dplyr)
#Read the file (adding the right path)
mydata  <- read.csv("data/data_year_o3.csv")
#Look the data
str(mydata)
head(mydata)
# Convert date to Date for plotting
mydata$date <- as.Date(mydata$date)
#Read the file (adding the right path)
mydata  <- read.csv("data/data_year_o3.csv")
#Look the data
str(mydata)
head(mydata)
# Convert date to Date for plotting
mydata$date <- as.Date(mydata$date)
# Create months
mydata$mon <- format(mydata$date, "%m")
#########################
#Data visualization
#Simple plots
########################
plot(mydata$o3,type="l",col="orange",xlab="days",ylab="MDA8 O3 (ppb)",main="MDA8 O3")
hist(mydata$o3,main="Distribution of Ozone",col='skyblue',xlab="MDA8 O3")
# Other options of plots
# ggplot2
ggplot2::ggplot(mydata, aes(x=date, y=o3, group=1)) +
geom_line(color="red") +
scale_x_date(date_breaks = "1 years", date_labels = "%Y-%m")
plot(mydata$tmax,mydata$o3,pch = 19, col = "blue", main = "Ozone vs Tx", xlab = "Tx (k)", ylab = "O3 (ppb)")
#Add fit lines
abline(lm(o3~tmax,mydata),col="red") # regression line (y~x)
# visualize all historigrams-graphs at once (alternative)
# hist(dat) #library(Hmisc)
#
pairs(mydata[,c(3:9,2)],panel=panel.smooth,col='black',cex=0.5,cex.labels=1)
#another way to make the plots
#lower panel:# panel.smooth function is built in.
source("plot_panel.R") #add correct path
pairs(mydata[,c(3:9,2)], cex.labels =0.9,
lower.panel=panel.smooth, upper.panel=panel.cor,diag.panel=panel.hist)
# We can create a season column
mydata <- mydata%>%mutate(season=ifelse(mon>="01" & mon<="02" | mon=="12", "DJF",
ifelse(mon>="03" & mon<="05", "MAM",
ifelse(mon>="06" & mon<="08", "JJA",
ifelse(mon>="09" & mon<="11", "SON",NA)))))
# We plot each season
# create a subset for each season and visualise
data_jja <- subset(mydata, season=="JJA")
plot(data_jja$o3,type="l",col="orange",xlab="days",ylab="MDA8 O3 (ppb)",main="MDA8 O3")
# It can be done for each season
# We can use ggplot and facet seasons
ggplot2::ggplot(mydata, aes(x=date, y=o3))+
geom_point() + facet_grid(~season)
# Plot the monthly cycle
#
boxplot(mydata$o3~mydata$mon)
#Load library
library(MASS)  # general packages
library(stats)
# library(Hmisc)
library(ggplot2) # plots
library(dplyr)
#Read the file (adding the right path)
mydata  <- read.csv("data/data_year_o3.csv")
#Look the data
str(mydata)
head(mydata)
# Convert date to Date for plotting
mydata$date <- as.Date(mydata$date)
# Create months
mydata$mon <- format(mydata$date, "%m")
#########################
#Data visualization
#Simple plots
########################
plot(mydata$o3,type="l",col="orange",xlab="days",ylab="MDA8 O3 (ppb)",main="MDA8 O3")
hist(mydata$o3,main="Distribution of Ozone",col='skyblue',xlab="MDA8 O3")
# Other options of plots
# ggplot2
ggplot2::ggplot(mydata, aes(x=date, y=o3, group=1)) +
geom_line(color="red") +
scale_x_date(date_breaks = "1 years", date_labels = "%Y-%m")
plot(mydata$tmax,mydata$o3,pch = 19, col = "blue", main = "Ozone vs Tx", xlab = "Tx (k)", ylab = "O3 (ppb)")
#Add fit lines
abline(lm(o3~tmax,mydata),col="red") # regression line (y~x)
install.packages("ggcorplot")
install.packages("ggcorrplot")
library(ggcorrplot)
corr <- round(cor(mydata[,c(3:9,2)]), 1)
head(corr)
corr <- round(cor(mydata[,c(3:9,2)]), 3)
ggcorrplot(corr)
mydata[,c(3:9,2)]%>%dplyr::group_by(season)%>%do(cor,data=.)
head(mydata)
# We can create a season column
mydata <- mydata%>%mutate(season=ifelse(mon>="01" & mon<="02" | mon=="12", "DJF",
ifelse(mon>="03" & mon<="05", "MAM",
ifelse(mon>="06" & mon<="08", "JJA",
ifelse(mon>="09" & mon<="11", "SON",NA)))))
# Another way to plot correlations
require(ggcorrplot)
corr <- round(cor(mydata[,c(3:9,2)]), 3)
ggcorrplot(corr)
mydata[,c(3:9,2)]%>%dplyr::group_by(season)%>%do(cor,data=.)
head(mydata)
# We plot each season
# create a subset for each season and visualise
data_jja <- subset(mydata, season=="JJA")
plot(data_jja$o3,type="l",col="orange",xlab="days",ylab="MDA8 O3 (ppb)",main="MDA8 O3")
# It can be done for each season
# We can use ggplot and facet seasons
ggplot2::ggplot(mydata, aes(x=date, y=o3))+
geom_point() + facet_grid(~season)
# Plot the monthly cycle
#
boxplot(mydata$o3~mydata$mon)
# Similarly with ggplot2
ggplot2::ggplot(mydata, aes(x=mon, y=o3))+ geom_boxplot(fill="blue")
# The rest of the variables can be also assessed like this
ggplot2::ggplot(mydata, aes(x=mon, y=tmax))+ geom_boxplot(fill="blue")
#*******************
#Linear regression:
#*******************
# Before starting, we will split the data into seasons and we restrict the analysis to
# summer (JJA). Repeat the steps for MAM for comparison
# Let's use  data_jja
#Fitting different models
#null model
# Remove the last column to avoid problems
data_jja$season <- NULL
m0  <- lm(o3~.,data=data_jja,na.action=na.omit)
#linear regression
m1  <- lm(o3~tmax,data=data_jja,na.action=na.omit) #or you can start by adding a different parameter (Tx,RH...)
#check model output
summary(m1)
#Adding more variables:
m2 <- update(m1,~.+rh)
m3 <- update(m2,~.+blh)
m4 <- update(m3,~.+ssrd)
#1.Anova test:
#Comparing null model with the model fitted with new variables
# m1 is statistically significant (Tx contribute to o3 variance)
anova(m0,m1)
#comparison of more models
anova(m1,m2,m3)
anova(m3,m4)
data_mam <- subset(mydata, season=="MAM")
head(data_mam)
pred.names <- names(data_jja[-(which(names(data_jja)%in%c("o3","date","mon")))])
pred.names
names(data_mam)
data_mam$season <- NULL
pred.names <- names(data_jja[-(which(names(data_jja)%in%c("o3","date","mon")))])
pred.names
# for spring repeat the same steps:
fit_mam <- lm(form, data=data_mam,na.action=na.omit)
#One way to write the form of the equation:
form  <- (paste("o3~",paste(pred.names,collapse='+'),sep=""))
form <- as.formula(form)
# for spring repeat the same steps:
fit_mam <- lm(form, data=data_mam,na.action=na.omit)
summary(fit_mam)
summary(fit_jja)
summary(fit)
#Add the form to the equation
fit <- lm(form, data=data_jja,na.action=na.omit)
#Add the form to the equation
fit <- lm(form, data=data_jja,na.action=na.omit)
# fit <- lm(o3 ~ LO3+Tx+Gh+RH+SR+ST+TC+U10, data=dat,na.action=na.omit)
summary(fit)
model_mam <- stepAIC(fit_mam,direction="both")
summary(model_mam)
plot(model_mam)
# calculate relative importance
relImportance <- calc.relimp(model, type = "lmg", rela = F)
##################################################
# Model selection
# Find a best subset of predictors to fit the model:
# StepAIC
##################################################
#direction-> "both", "backward","forward"
model <- stepAIC(fit,direction="both")
summary(model)
#Repeat the plots for the final model
#Plot the model
plot(model)
#######################
# Variable importance
#######################
require(relaimpo)
# calculate relative importance
relImportance <- calc.relimp(model, type = "lmg", rela = F)
relImportance_mam <- calc.relimp(model_mam, type = "lmg", rela = F)
relImportance_mam
relImportance
df.rimpo <- data.frame("jja"=sort(round(relImportance$lmg, 3), decreasing=TRUE))
df.rimpo$variable <- rownames(df.rimpo)
# for mam
df.rimpo.mam <- data.frame("mam"=sort(round(relImportance_mam$lmg, 3), decreasing=TRUE))
df.rimpo.mam$variable <- rownames(df.rimpo.mam)
df.rimpo.mam
#******************************
# Logistic regression: glm
#******************************
# conditions, high O3 levels (how many days with O3>50 or 60 ppb)
ths            <- 50 # change to 60 and see how the number of excendances changes
data_jja$date.f  <- 1:length(data_jja$date)
data_jja$o3_50   <- ifelse(data_jja$o3>=ths, "orange", "forestgreen")
plot(o3~date.f, data=data_jja, type="h", col=o3_50)
abline(h=ths, lty=2, col="red")
#Convert the outcome(o3) into binary data:
data_jja$o3 <- ifelse(data_jja$o3>ths,1,0)
fitglm <- glm(o3~tmax+rh+ssrd+blh+Direction+ws,data=data_jja,family=binomial())
#summary of model
summary(fitglm)
#Apply model selection
modelglm <- stepAIC(fitglm,direction="both")
summary(modelglm)
plot(modelglm)
calc.relimp(fitglm)
install.packages("Cater")
install.packages("cater")
install.packages("caret")
library(caret)
varImp(modelglm)
varImp(modelglm, scale=T)
